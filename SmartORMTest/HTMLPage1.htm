<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
</head>
<body smart-controller="MainController">
    <script type="text/javascript">
        var myModel;
        window.onload = function () {
            myModel = new Model;
            myModel.set("name", "isildur");
        }
    </script>
    <input type="text" data-bind="name" /><input type="button" onclick="javascript:console.log(myModel.get('name'));" value="Test" />
    <script type="text/javascript">
        var pubsub = (function () {
            var _callbacks = {};
            var pubsub = {
                sub: function (name, callback) {
                    if (!_callbacks.hasOwnProperty(name)) {
                        _callbacks[name] = [];
                    }
                    _callbacks[name].push(callback);
                },
                pub: function (name) {
                    var args = Array.prototype.slice.call(arguments, 1)
                    if (_callbacks.hasOwnProperty(name)) {
                        _callbacks[name].forEach(function (callback) {
                            callback.apply(this, args);
                        });
                    }
                }
            }
            return pubsub;
        })();

        // listener capture view change event --> publish view.change event
        var changeHandler = function (event) {
            var target = event.target,
        propName = target.getAttribute('data-bind');
            if (propName && propName !== '') {
                pubsub.pub('model.change', propName, target.value);
            }
        }
        document.addEventListener('change', changeHandler, false);

        // view.change event --> change view
        pubsub.sub('view.change', function (propName, newVal) {
            var elements = document.querySelectorAll('[data-bind=' + propName + ']'),
        tagName;
            for (var i = 0, l = elements.length; i < l; i++) {
                tagName = elements[i].tagName.toLowerCase();
                if (tagName === 'input' || tagName === 'textarea' || tagName === 'select') {
                    elements[i].value = newVal;
                } else {
                    elements[i].innerHTML = newVal;
                }
            }
        });

        var Model = function () {
            var model = {
                props: {},
                set: function (propName, value) {
                    this.props[propName] = value;
                    // model change --> publish view.change event
                    pubsub.pub('view.change', propName, value);
                },
                get: function (propName) {
                    return this.props[propName];
                }
            }
            // model.change event --> change model data
            pubsub.sub('model.change', function (propName, newVal) {
                model.set(propName, newVal);
            });
            return model;
        }
    </script>
</body>
</html>
